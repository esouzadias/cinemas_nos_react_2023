{"ast":null,"code":"var _jsxFileName = \"/Users/eric/Documents/GitHub/ReactJS/cinemas_nos_react_2023/cnos_2023/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from \"./Layout/Header/Header\";\nimport MainIntro from './Layout/MainIntro/MainIntro';\nimport NowPlaying from './Layout/NowPlaying/NowPlaying';\nimport { fetchMoviesData, fetchMoviesGenres } from './Services/Utils/ApiRequests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isMobile, setIsMobile] = useState(false);\n  const [movieData, setMovieData] = useState(null);\n  const [movieGenres, setMovieGenres] = useState(null);\n  const [currentMovieGenre, setCurrentMovieGenre] = useState([]);\n  const [currentMovieIndex, setCurrentMovieIndex] = useState(0); // Índice inicial\n  const intervalTime = 10000; // Alterar a cada 5 segundos (ou o que desejar)\n  const [movieTime, setMovieTime] = useState([]); // Estado para armazenar os valores de movieTime\n\n  const fetchMovies = async () => {\n    try {\n      const data = await fetchMoviesData();\n      const sortedMovies = data.results.sort((a, b) => b.vote_average - a.vote_average) // Classificar em ordem decrescente de média de votos\n      .slice(0, 6); // Pegar os 6 primeiros filmes da lista classificada\n      setMovieData(sortedMovies);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fetchMovieGenres = async () => {\n    try {\n      const data = await fetchMoviesGenres();\n      const genres = data.genres || [];\n      setMovieGenres(genres);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Função para gerar valores de movieTime aleatórios para cada filme\n  const generateMovieTimes = movieData => {\n    return movieData.map(() => {\n      return `${Math.floor(Math.random() * (180 - 60 + 1)) + 60} Min`;\n    });\n  };\n  useEffect(() => {\n    if (movieData && movieData[currentMovieIndex]) {\n      const currentMovieGenreIds = movieData[currentMovieIndex].genre_ids || [];\n      const currentMovieGenreNames = currentMovieGenreIds.map(genreId => {\n        const genre = movieGenres === null || movieGenres === void 0 ? void 0 : movieGenres.find(genre => genre.id === genreId);\n        return genre ? genre.name : \"\";\n      }).join(\", \");\n      setCurrentMovieGenre(currentMovieGenreNames);\n    }\n  }, [currentMovieIndex, movieData, movieGenres]);\n  useEffect(() => {\n    fetchMovies();\n    fetchMovieGenres();\n\n    // Configurar um intervalo para alterar o filme exibido a cada x segundos\n    const intervalId = setInterval(() => {\n      setCurrentMovieIndex(prevIndex => (prevIndex + 1) % 6); // Alternar entre os 6 filmes\n    }, intervalTime);\n\n    /* const newMovieData = [...movieData, ...movieGenres];  */\n\n    return () => {\n      // Limpar o intervalo quando o componente é desmontado\n      clearInterval(intervalId);\n    };\n  }, []);\n  useEffect(() => {\n    // Gerar os valores de movieTime apenas uma vez quando os dados de filmes estiverem disponíveis\n    if (movieData && movieTimes.length === 0) {\n      const generatedMovieTime = generateMovieTimes(movieData);\n      setMovieTime(generatedMovieTimes);\n    }\n  }, [movieData, movieTime]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), movieData && currentMovieGenre && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainIntro, {\n        mainMovie: movieData ? movieData : null,\n        currentMovieIndex: currentMovieIndex,\n        currentMovieGenre: currentMovieGenre,\n        movieTime: movieTime[currentMovieIndex] || null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NowPlaying, {\n        currentMovieGenre: movieGenres,\n        currentMovieIndex: currentMovieIndex,\n        movieData: movieData,\n        movieTime: movieTime[currentMovieIndex] || null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CrQBxpBexJFGALNMaVam1B0PTsM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","MainIntro","NowPlaying","fetchMoviesData","fetchMoviesGenres","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isMobile","setIsMobile","movieData","setMovieData","movieGenres","setMovieGenres","currentMovieGenre","setCurrentMovieGenre","currentMovieIndex","setCurrentMovieIndex","intervalTime","movieTime","setMovieTime","fetchMovies","data","sortedMovies","results","sort","a","b","vote_average","slice","error","console","fetchMovieGenres","genres","generateMovieTimes","map","Math","floor","random","currentMovieGenreIds","genre_ids","currentMovieGenreNames","genreId","genre","find","id","name","join","intervalId","setInterval","prevIndex","clearInterval","movieTimes","length","generatedMovieTime","generatedMovieTimes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mainMovie","_c","$RefreshReg$"],"sources":["/Users/eric/Documents/GitHub/ReactJS/cinemas_nos_react_2023/cnos_2023/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from \"./Layout/Header/Header\";\nimport MainIntro from './Layout/MainIntro/MainIntro';\nimport NowPlaying from './Layout/NowPlaying/NowPlaying';\nimport { fetchMoviesData, fetchMoviesGenres } from './Services/Utils/ApiRequests';\n\nfunction App() {\n  const [isMobile, setIsMobile] = useState(false);\n  const [movieData, setMovieData] = useState(null);\n  const [movieGenres, setMovieGenres] = useState(null);\n  const [currentMovieGenre, setCurrentMovieGenre] = useState([]);\n  const [currentMovieIndex, setCurrentMovieIndex] = useState(0); // Índice inicial\n  const intervalTime = 10000; // Alterar a cada 5 segundos (ou o que desejar)\n  const [movieTime, setMovieTime] = useState([]); // Estado para armazenar os valores de movieTime\n\n  const fetchMovies = async () => {\n    try {\n      const data = await fetchMoviesData();\n      const sortedMovies = data.results\n        .sort((a, b) => b.vote_average - a.vote_average) // Classificar em ordem decrescente de média de votos\n        .slice(0, 6); // Pegar os 6 primeiros filmes da lista classificada\n      setMovieData(sortedMovies);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fetchMovieGenres = async () => {\n    try {\n      const data = await fetchMoviesGenres();\n      const genres = data.genres || [];\n      setMovieGenres(genres);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Função para gerar valores de movieTime aleatórios para cada filme\n  const generateMovieTimes = (movieData) => {\n    return movieData.map(() => {\n      return `${Math.floor(Math.random() * (180 - 60 + 1)) + 60} Min`;\n    });\n  };\n\n  useEffect(() => {\n    if (movieData && movieData[currentMovieIndex]) {\n      const currentMovieGenreIds = movieData[currentMovieIndex].genre_ids || [];\n      const currentMovieGenreNames = currentMovieGenreIds.map((genreId) => {\n        const genre = movieGenres?.find((genre) => genre.id === genreId);\n        return genre ? genre.name : \"\";\n      }).join(\", \");\n      setCurrentMovieGenre(currentMovieGenreNames);\n    }\n  }, [currentMovieIndex, movieData, movieGenres]);\n\n  useEffect(() => {\n    fetchMovies();\n    fetchMovieGenres();\n\n    // Configurar um intervalo para alterar o filme exibido a cada x segundos\n    const intervalId = setInterval(() => {\n      setCurrentMovieIndex((prevIndex) => (prevIndex + 1) % 6); // Alternar entre os 6 filmes\n    }, intervalTime);\n\n    /* const newMovieData = [...movieData, ...movieGenres];  */\n\n    return () => {\n      // Limpar o intervalo quando o componente é desmontado\n      clearInterval(intervalId);\n    };\n  }, [])\n\n  useEffect(() => {\n    // Gerar os valores de movieTime apenas uma vez quando os dados de filmes estiverem disponíveis\n    if (movieData && movieTimes.length === 0) {\n      const generatedMovieTime = generateMovieTimes(movieData);\n      setMovieTime(generatedMovieTimes);\n    }\n  }, [movieData, movieTime]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {movieData && currentMovieGenre && (\n      <>\n        <MainIntro \n          mainMovie={movieData ? movieData : null} \n          currentMovieIndex={currentMovieIndex}\n          currentMovieGenre={currentMovieGenre}\n          movieTime={movieTime[currentMovieIndex] || null}/>\n        <NowPlaying currentMovieGenre={movieGenres} currentMovieIndex={currentMovieIndex} movieData={movieData} movieTime={movieTime[currentMovieIndex] || null}/>\n      </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}