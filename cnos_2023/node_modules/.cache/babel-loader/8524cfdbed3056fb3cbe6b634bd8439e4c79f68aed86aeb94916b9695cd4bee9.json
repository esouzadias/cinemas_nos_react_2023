{"ast":null,"code":"var _jsxFileName = \"/Users/eric/Documents/GitHub/ReactJS/cinemas_nos_react_2023/cnos_2023/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from \"./Layout/Header/Header\";\nimport MainIntro from './Layout/MainIntro/MainIntro';\nimport NowPlaying from './Layout/NowPlaying/NowPlaying';\nimport { fetchMoviesData, fetchMoviesGenres } from './Services/Utils/ApiRequests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isMobile, setIsMobile] = useState(false);\n  const [movieData, setMovieData] = useState(null);\n  const [movieGenres, setMovieGenres] = useState(null);\n  const [currentMovieGenre, setCurrentMovieGenre] = useState([]);\n  const [currentMovieIndex, setCurrentMovieIndex] = useState(0); // Índice inicial\n  const intervalTime = 10000; // Alterar a cada 5 segundos (ou o que desejar)\n  const [movieTimes, setMovieTimes] = useState([]); // Estado para armazenar os valores de movieTime\n\n  const fetchMovies = async () => {\n    try {\n      const movieResponse = await fetchMoviesData();\n      const genreResponse = await fetchMoviesGenres();\n      setMovieData(movieResponse.results);\n      setMovieGenres(genreResponse.genres);\n\n      // Gere aleatoriamente os valores de movieTime uma vez\n      const generatedMovieTimes = Array.from({\n        length: movieResponse.results.length\n      }, () => {\n        return `${Math.floor(Math.random() * (180 - 60 + 1)) + 60} Min`;\n      });\n      setMovieTimes(generatedMovieTimes);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /* const fetchMovieGenres = async () => {\n    try {\n      const data = await fetchMoviesGenres();\n      const genres = data.genres || [];\n      setMovieGenres(genres);\n    } catch (error) {\n      console.error(error);\n    }\n  }; */\n\n  useEffect(() => {\n    if (movieData && movieData[currentMovieIndex]) {\n      const currentMovieGenreIds = movieData[currentMovieIndex].genre_ids || [];\n      const currentMovieGenreNames = currentMovieGenreIds.map(genreId => {\n        const genre = movieGenres === null || movieGenres === void 0 ? void 0 : movieGenres.find(genre => genre.id === genreId);\n        return genre ? genre.name : \"\";\n      }).join(\", \");\n      setCurrentMovieGenre(currentMovieGenreNames);\n    }\n  }, [currentMovieIndex, movieData, movieGenres]);\n  useEffect(() => {\n    fetchMoviesAndGenres();\n\n    // Configurar um intervalo para alterar o filme exibido a cada x segundos\n    const intervalId = setInterval(() => {\n      setCurrentMovieIndex(prevIndex => (prevIndex + 1) % 6); // Alternar entre os 6 filmes\n    }, intervalTime);\n    return () => {\n      // Limpar o intervalo quando o componente é desmontado\n      clearInterval(intervalId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), movieData && currentMovieGenre && movieTimes.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MainIntro, {\n        mainMovie: movieData ? movieData : null,\n        currentMovieIndex: currentMovieIndex,\n        currentMovieGenre: currentMovieGenre,\n        movieTime: movieTimes[currentMovieIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NowPlaying, {\n        currentMovieGenre: movieGenres,\n        currentMovieIndex: currentMovieIndex,\n        movieData: movieData,\n        movieTime: movieTime\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cd4w5JKsEtciGXSbEowhsjKoHMg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","MainIntro","NowPlaying","fetchMoviesData","fetchMoviesGenres","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isMobile","setIsMobile","movieData","setMovieData","movieGenres","setMovieGenres","currentMovieGenre","setCurrentMovieGenre","currentMovieIndex","setCurrentMovieIndex","intervalTime","movieTimes","setMovieTimes","fetchMovies","movieResponse","genreResponse","results","genres","generatedMovieTimes","Array","from","length","Math","floor","random","error","console","currentMovieGenreIds","genre_ids","currentMovieGenreNames","map","genreId","genre","find","id","name","join","fetchMoviesAndGenres","intervalId","setInterval","prevIndex","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","mainMovie","movieTime","_c","$RefreshReg$"],"sources":["/Users/eric/Documents/GitHub/ReactJS/cinemas_nos_react_2023/cnos_2023/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from \"./Layout/Header/Header\";\nimport MainIntro from './Layout/MainIntro/MainIntro';\nimport NowPlaying from './Layout/NowPlaying/NowPlaying';\nimport { fetchMoviesData, fetchMoviesGenres } from './Services/Utils/ApiRequests';\n\nfunction App() {\n  const [isMobile, setIsMobile] = useState(false);\n  const [movieData, setMovieData] = useState(null);\n  const [movieGenres, setMovieGenres] = useState(null);\n  const [currentMovieGenre, setCurrentMovieGenre] = useState([]);\n  const [currentMovieIndex, setCurrentMovieIndex] = useState(0); // Índice inicial\n  const intervalTime = 10000; // Alterar a cada 5 segundos (ou o que desejar)\n  const [movieTimes, setMovieTimes] = useState([]); // Estado para armazenar os valores de movieTime\n\n  const fetchMovies = async () => {\n    try {\n      const movieResponse = await fetchMoviesData();\n      const genreResponse = await fetchMoviesGenres();\n      setMovieData(movieResponse.results);\n      setMovieGenres(genreResponse.genres);\n\n      // Gere aleatoriamente os valores de movieTime uma vez\n      const generatedMovieTimes = Array.from({ length: movieResponse.results.length }, () => {\n        return `${Math.floor(Math.random() * (180 - 60 + 1)) + 60} Min`;\n      });\n      setMovieTimes(generatedMovieTimes);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /* const fetchMovieGenres = async () => {\n    try {\n      const data = await fetchMoviesGenres();\n      const genres = data.genres || [];\n      setMovieGenres(genres);\n    } catch (error) {\n      console.error(error);\n    }\n  }; */\n\n  useEffect(() => {\n    if (movieData && movieData[currentMovieIndex]) {\n      const currentMovieGenreIds = movieData[currentMovieIndex].genre_ids || [];\n      const currentMovieGenreNames = currentMovieGenreIds.map((genreId) => {\n        const genre = movieGenres?.find((genre) => genre.id === genreId);\n        return genre ? genre.name : \"\";\n      }).join(\", \");\n      setCurrentMovieGenre(currentMovieGenreNames);\n    }\n  }, [currentMovieIndex, movieData, movieGenres]);\n\n  useEffect(() => {\n    fetchMoviesAndGenres();\n\n    // Configurar um intervalo para alterar o filme exibido a cada x segundos\n    const intervalId = setInterval(() => {\n      setCurrentMovieIndex((prevIndex) => (prevIndex + 1) % 6); // Alternar entre os 6 filmes\n    }, intervalTime);\n\n    return () => {\n      // Limpar o intervalo quando o componente é desmontado\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {movieData && currentMovieGenre && movieTimes.length > 0 && (\n      <>\n        <MainIntro \n          mainMovie={movieData ? movieData : null} \n          currentMovieIndex={currentMovieIndex}\n          currentMovieGenre={currentMovieGenre}\n          movieTime={movieTimes[currentMovieIndex]}/>\n        <NowPlaying currentMovieGenre={movieGenres} currentMovieIndex={currentMovieIndex} movieData={movieData} movieTime={movieTime}/>\n      </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}